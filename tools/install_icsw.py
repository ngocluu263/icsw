#!/usr/bin/env python
#
# Copyright (C) 2015 Bernhard Mallinger
#
# Send feedback to: <mllinger@init.at>
#
# This file is part of icsw
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
import argparse

import platform
import os
import os.path
import subprocess
import sys


try:
    input = raw_input  # python 2/3
except NameError:
    pass


class OSHandler(object):
    def __init__(self, opts):
        self.opts = opts

    @classmethod
    def get_local_os(cls, opts):
        """
        :rtype: OSHandler
        """
        # format as in platform module
        # for ubuntu, ubuntu is returned anyway, so supported dists does not appear to be strict
        supported_dists = ("SuSE", "centos", "debian")
        distro = platform.linux_distribution(supported_dists=supported_dists,
                                             full_distribution_name=False)[0]

        if distro.lower() == "suse":
            return SuseHandler(opts)
        elif distro.lower() == "centos":
            return CentosHandler(opts)
        elif distro.lower() in ("debian", "ubuntu"):
            return AptgetHandler(opts)
        else:
            raise RuntimeError(
                "This install script does not support your platform: {}\n".format(platform.linux_distribution()[0]) +
                "Supported platforms are: {}".format(supported_dists)
            )

    def add_repos(self):
        raise NotImplementedError()

    def install_icsw(self):
        raise NotImplementedError()

    def process_command(self, cmd):
        if self.opts.show_commands:
            print(" ".join(cmd))
        else:
            print("Running:", " ".join(cmd))
            return subprocess.call(cmd)


class SuseHandler(OSHandler):
    # version must be like "13.1"
    CLUSTER_DEVEL_URL = "http://{user}:{password}@www.initat.org/cluster/RPMs/suse_{version}/cluster-devel"
    EXTRA_URL = "http://{user}:{password}@www.initat.org/cluster/RPMs/suse_{version}/extra"

    def add_repos(self):
        suse_version = platform.linux_distribution()[1]
        expansions = {
            'user': self.opts.user,
            'password': self.opts.password,
            'version': suse_version,
        }
        repos = (
            ("initat_cluster_devel", self.__class__.CLUSTER_DEVEL_URL.format(**expansions)),
            ("initat_extra", self.__class__.EXTRA_URL.format(**expansions)),
        )

        for repo_name, repo_url in repos:
            repo_list = subprocess.check_output(("zypper", "repos", "--uri"))
            if repo_url not in str(repo_list):
                command = ("zypper", "addrepo", repo_url, repo_name)
                self.process_command(command)

    def install_icsw(self):
        commands = [
            ("zypper", "refresh"),
            ("zypper", "install", "icsw-server"),
        ]

        for cmd in commands:
            self.process_command(cmd)


class CentosHandler(OSHandler):
    def add_repos(self):
        raise NotImplementedError()

    def install_icsw(self):
        raise NotImplementedError()


class AptgetHandler(OSHandler):
    def add_repos(self):
        raise NotImplementedError()

    def install_icsw(self):
        raise NotImplementedError()


def parse_args():
    parser = argparse.ArgumentParser(prog="install_icsw.py")
    parser.add_argument("-s", "--show-commands", dest="show_commands", action="store_true",
                        help="only show commands without actually executing them")

    parser.add_argument("-u", "--user", dest='user', required=True, help="your icsw user name")
    parser.add_argument("-p", "--password", dest='password', required=True, help="your icsw password")
    parser.add_argument("-cn", "--cluster-name", dest='cluster_name', required=True,
                        help="cluster name as provided by init.at")
    parser.add_argument("-ci", "--cluster-id", dest='cluster_id', required=True,
                        help="your local autogenerated cluster id")
    return parser.parse_args()


def main():

    opts = parse_args()

    if not opts.show_commands:
        print(input)
        answer = input("This script will add repositories and install packages using your package management. " +
                       "Continue? (y/n) ")
        if answer.lower() != "y":
            print("Exiting.")
            sys.exit(0)

    if opts.show_commands:
        print("The following commands need to be executed:")

    local_os = OSHandler.get_local_os(opts)

    local_os.add_repos()

    local_os.install_icsw()

    local_os.process_command(
        (
            "icsw",
            "license",
            "--user", opts.user,
            "--password", opts.password,
            "--cluster-name", opts.cluster_name,
            "--cluster-id", opts.cluster_id
        )
    )


if __name__ == "__main__":
    main()

