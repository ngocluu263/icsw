#!/bin/bash
#
### BEGIN INIT INFO
# Provides:       sge_execd
# Required-Start: $network $remote_fs
# Required-Stop: $network $remote_fs
# Should-Start: autofs
# Default-Start:  2 3 5
# Default-Stop: 0 1 6
# Description:  start Grid Engine execd 
### END INIT INFO
# chkconfig: 35 96 2

# suse
export SYSTEMD_NO_WRAP="1"
# redhat
export SYSTEMCTL_SKIP_REDIRECT="1"

if [ -f /etc/rc.status ] ; then
    . /etc/rc.status
else
    . /etc/rc.status_suse
fi
[ -f /etc/redhat-release ] && . /etc/init.d/functions

PATH=/bin:/usr/bin:/sbin:/usr/sbin

# FixLimits
# modifies resource limits; needed for infiniband
#

logger "sgeexecd called with $1"

FixLimits() {
    logger "setting limits for sgeexecd"
    ulimit -H -l unlimited
    ulimit -S -l unlimited
}

FixLink() {
    if [ ! -L /usr/sbin/rcsgeexecd ] ; then
        logger "Creating link for sgeexecd"
        ln -s $0 /usr/sbin/rcsgeexecd
    fi
}

if [ -f /etc/sge_cell -a -f /etc/sge_root ] ; then
    SGE_ROOT=`cat /etc/sge_root` ; export SGE_ROOT
    SGE_CELL=`cat /etc/sge_cell` ; export SGE_CELL
else
    echo "SGE Environment not set, exiting..."
    rc_failed
    rc_status -v
    rc_exit
fi

FixLimits
FixLink

SGE_QMASTER_PORT=6444; export SGE_QMASTER_PORT 
SGE_EXECD_PORT=6445; export SGE_EXECD_PORT

# wait for SGE_ROOT to become visible

count=0
if [ -L "${SGE_ROOT}" ] ; then
    _SR=$(readlink ${SGE_ROOT})
else
    _SR="${SGE_ROOT}"
fi
while [ ! -d "${_SR}" -a $count -le 120 ] ; do
    count=`expr $count + 1`
    sleep 1
done

ARCH=$(${SGE_ROOT}/util/arch)

[ -f /etc/default/sgeexecd ] && . /etc/default/sgeexecd
[ -f /etc/sysconfig/sgeexecd ] && . /etc/sysconfig/sgeexecd


#---------------------------------------------------------------------------
# Shutdown
# Send SIGTERM (default) or signal $3 to process name $1 with pid in file $2
#
Shutdown() {
    name=$1
    pidfile=$2
    signal="-TERM"
   
    if [ $# = 3 ] ; then
        signal="-$3"
    fi
    if [ -f $pidfile ] ; then
        pid=`cat $pidfile`
        $utilbin_dir/checkprog $pid $name > /dev/null
        if [ "$?" = 0 ] ; then
            kill $signal $pid
            return $?
        fi
    fi
}


#---------------------------------------------------------------------------
# GetPathToBinaries
#    echo the name of the bin_dir on this system
#    The check is fulfilled if we can access the qstat binary
#    echo "none" if we can't determine the binary path
GetPathToBinaries() {
    cfgname=$SGE_ROOT/$SGE_CELL/common/bootstrap

    base=none

    if [ -f $cfgname ] ; then
        base=`grep binary_path $cfgname | awk '{ print $2 }'`
        if [ -f $base/qstat ] ; then
            :
        elif [ -f $SGE_ROOT/util/arch ] ; then
            arch=`$SGE_ROOT/util/arch`
            if [ -f $base/$arch/qstat ] ; then
                base=$base/$arch
            fi
        fi
    fi

    echo $base
}


#---------------------------------------------------------------------------
# GetAdminUser
#    echo the name of the admin user on this system
#    echo "root" if admin user retrieval fails
GetAdminUser() {
    cfgname=$SGE_ROOT/$SGE_CELL/common/bootstrap
    user=none

    if [ -f $cfgname ] ; then
        user=`grep admin_user $cfgname | awk '{ print $2 }'`
    fi

    if [ `echo $user|tr "[A-Z]" "[a-z]"` = "none" ] ; then
        user=root
    fi
    echo $user
}

#---------------------------------------------------------------------------
# GetPathToUtilbin
#    echo the path to the binaries in utilbin
#    The check is fulfilled if we can access the "gethostname" binary
#    echo "none" if we can't determine the binary path
#
GetPathToUtilbin() {
    base=none

    if [ -f $SGE_ROOT/util/arch ] ; then
        utilbindir=$SGE_ROOT/utilbin

        arch=`$SGE_ROOT/util/arch`
        if [ -f $utilbindir/$arch/gethostname ] ; then
            base=$utilbindir/$arch
        fi
    fi

    echo $base
}


#---------------------------------------------------------------------------
# GetExecdSpoolDir
# get the execution daemon spooling dir from configuration
GetExecdSpoolDir() {
    EXECD_SPOOL_DIR=`$bin_dir/qconf -sconf $UQHOST 2>/dev/null |
        grep execd_spool_dir | awk '{ print $2 }'`
    if [ "$EXECD_SPOOL_DIR" = "" ] ; then
        EXECD_SPOOL_DIR=`$bin_dir/qconf -sconf | grep execd_spool_dir | awk '{ print $2 }'`
    fi
    echo "$EXECD_SPOOL_DIR"
}

#---------------------------------------------------------------------------
usage() {
    echo "Grid Engine start/stop script. Valid parameters are:"
    echo ""
    echo "   start        start the SGE execution daemon."
    echo "   stop         shutdown local Grid Engine processes and jobs"
    echo "   softstop     shutdown local Grid Engine processes (no jobs)"
    echo "   restart      restart local Grid Engine processes (keeping jobs)"
    echo "   status       status of the sgeexecd"
    echo
    exit 1
}


#---------------------------------------------------------------------------
# MAIN Procedure
#

bin_dir=`GetPathToBinaries`
if [ "$bin_dir" = "none" ] ; then
    echo -n "can't determine path to Grid Engine binaries"
    rc_failed 3
    rc_status -v
    rc_exit
fi

utilbin_dir=`GetPathToUtilbin`
if [ "$utilbin_dir" = "none" ] ; then
    echo -n "can't determine path to Grid Engine utility binaries"
    rc_failed 3
    rc_status -v
    rc_exit
fi

# HOST is the aliased name (SGE name)
# UQHOST is the local host name (unqualified name)
HOST=`$utilbin_dir/gethostname -aname`
UQHOST=`$utilbin_dir/gethostname -name | cut -f1 -d.`

execd_run_dir=`GetExecdSpoolDir`/$UQHOST

case "$1" in
    stop|softstop)
        # Shutdown execution daemon
        execd_spool_dir=$execd_run_dir

        echo -n "Shutting down Grid Engine execution daemon"
        # Send SIGTERM to execd
        Shutdown sge_execd $execd_run_dir/execd.pid
        ret=$?
        if [ -f /var/lock/subsys/sgeexecd ] ; then
            uid=`$utilbin_dir/uidgid -uid`
            if [ "$uid" = "0" -a "$ret" = "0" ] ; then
                rm -f /var/lock/subsys/sgeexecd >/dev/null 2>&1
            else
                echo -n "Can't shut down execd!"
                rc_failed
                rc_status -v
                rc_exit
            fi
        fi
        # execution daemon is started on this host!
        if [ "$SGE_EXECD_PORT" = "" ] ; then
            ping_port=`$utilbin_dir/getservbyname -number sge_execd`
        else
            ping_port=$SGE_EXECD_PORT
        fi
        # Wait while daemon is up
        retries=0
        while [ $retries -le 61 ] ; do
            $bin_dir/qping -info "$HOST" "$ping_port" execd 1 > /dev/null 2>&1
            if [ $? -ne 0 ] ; then
                break
            else
                sleep 1
                retries=`expr $retries + 1`
            fi
        done
        if [ $retries -eq 61 ] ; then
            echo "Execd did not stop in 61 seconds!"
            exit 1
        fi
        if [ "$1" = "stop" ] ; then
            # Send SIGTERM to all shepherds (send SIGTSTP which is converted to SIGTERM by shepherd)
            for jobid in `ls $execd_spool_dir/active_jobs 2>/dev/null`; do
                echo "Shutting down Grid Engine shepherd of job $jobid"
                Shutdown sge_shepherd $execd_spool_dir/active_jobs/$jobid/pid TSTP
            done
        fi
        rc_status -v
        ;;
    status)
        echo -n "checking sgeexecd "
        already_running=false
        if [ -f /var/lock/subsys/sgeexecd ] ; then
            already_running=true
        fi
        if [ "${already_running}" = true ] ; then
            echo -n "running"
        else
            echo -n "not running"
            rc_failed
        fi
        rc_status -v
        ;;
    start)
        # Ensure the shepherd will run, e.g. not missing hwloc dynamic lib
        #if ! $bin_dir/sge_shepherd -help >/dev/null 2>&1; then
        #    echo "sge_shepherd won't run -- dynamic library missing?"
        #    exit 5
        #fi
        # execution daemon is started on this host!
        if [ "$SGE_EXECD_PORT" = "" ] ; then
            ping_port=`$utilbin_dir/getservbyname -number sge_execd`
        else
            ping_port=$SGE_EXECD_PORT
        fi
        echo -n "Starting Grid Engine execution daemon"
        ( exec 1>/dev/null 2>&1 $bin_dir/sge_execd )
        [ $? -eq 0 -a -d /var/lock/subsys ] && touch /var/lock/subsys/sgeexecd

        #Don't exit until daemon is up
        retries=0
        while [ $retries -le 61 ] ; do
            $bin_dir/qping -info "$HOST" "$ping_port" execd 1 > /dev/null 2>&1
            if [ $? -eq 0 ] ; then
                break
            else
                sleep 1
                retries=`expr $retries + 1`
            fi
        done
        if [ $retries -eq 61 ] ; then
            logger -n "execd did not start in 61 seconds!"
            rc_failed
        fi
        rc_status -v
        ;;
    restart)
        $0 softstop
        sleep 1
        $0 start
        rc_status
        ;;
    *)
        usage
        ;;
esac

rc_exit
