#!/bin/sh
#
#
# SGE/SGEEE startup script
#
#___INFO__MARK_BEGIN__
##########################################################################
#
#  The Contents of this file are made available subject to the terms of
#  the Sun Industry Standards Source License Version 1.2
#
#  Sun Microsystems Inc., March, 2001
#
#
#  Sun Industry Standards Source License Version 1.2
#  =================================================
#  The contents of this file are subject to the Sun Industry Standards
#  Source License Version 1.2 (the "License"); You may not use this file
#  except in compliance with the License. You may obtain a copy of the
#  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
#
#  Software provided under this License is provided on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
#  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
#  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
#  See the License for the specific provisions governing your rights and
#  obligations concerning the Software.
#
#  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
#
#  Copyright: 2001 by Sun Microsystems, Inc.
#
#  All Rights Reserved.
#
##########################################################################
#___INFO__MARK_END__

#
# This script can be called with the following arguments:
#
#       start       start execution daemon
#       stop        Terminates the execution daemon
#                   and the shepherd. This only works if the execution daemon 
#                   spool directory is in the default location.
#       softstop    do not kill the shepherd process
#
# Unix commands which may be used in this script:
#    cat cut tr ls grep awk sed basename
#
# This script requires the script $SGE_ROOT/util/arch
#

PATH=/bin:/usr/bin:/sbin:/usr/sbin

#---------------------------------------------------------------------------
# The following lines provide the necessary info for adding a startup script
# according to the Linux Standard Base Specification (LSB) 1.0.0 which can
# be found at:
#
#    http://www.linuxbase.org/spec/gLSB/gLSB/sysinit.html
#
# See also
#
#    http://www.suse.de/~grimmer/Package-Conventions/index.html
#
### BEGIN INIT INFO
# Provides:       sgeexecd 
# Required-Start: $network
# Should-Start: package-client
# Required-Stop:
# Default-Start:  3 5
# Default-Stop: 0 1 2 6
# Description:  start Grid Engine execd 
### END INIT INFO
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# FixServices
# add entries to /etc/services if necessary
#
FixServices() {
    # clear old ones
    cat /etc/services | grep -a -v sge_execd | grep -a -v sge_qmaster > /tmp/bla
    mv /tmp/bla /etc/services
    cat /etc/services | grep -a sge_execd > /dev/null || {
	logger "modifying /etc/services for sgeexecd"
	if [ -f /etc/sysconfig/sge/qmaster_port ] ; then
	    echo "sge_qmaster     $(cat /etc/sysconfig/sge/qmaster_port)" >> /etc/services
	    echo "sge_execd       $(cat /etc/sysconfig/sge/execd_port)" >> /etc/services
	else
	    echo "sge_qmaster     6444/tcp" >> /etc/services
	    echo "sge_execd       6445/tcp" >> /etc/services
	fi
    }
}
# FixLimits
# modifies resource limits; needed for infiniband
#
FixLimits() {
    logger "setting limits for sgeexecd"
    ulimit -H -l unlimited
    ulimit -S -l unlimited
}

FixLink() {
    if [ ! -L /usr/sbin/rcsgeexecd ] ; then
	logger "Creating link for sgeexecd"
	ln -s $0 /usr/sbin/rcsgeexecd
    fi
}

if [ -f /etc/sge_cell -a -f /etc/sge_root ] ; then
    SGE_ROOT=`cat /etc/sge_root` ; export SGE_ROOT
    SGE_CELL=`cat /etc/sge_cell` ; export SGE_CELL
else
    echo "SGE Environment not set, exiting..."
    exit -1 
fi

FixServices
FixLimits
FixLink

unset CODINE_ROOT GRD_ROOT COD_CELL GRD_CELL

SGE_ARCH=`$SGE_ROOT/util/arch`
shlib_path_name=`$SGE_ROOT/util/arch -lib`
old_value=`eval echo '$'$shlib_path_name`
if [ x$old_value = x ]; then
   eval $shlib_path_name=$SGE_ROOT/lib/$SGE_ARCH
else
   eval $shlib_path_name=$old_value:$SGE_ROOT/lib/$SGE_ARCH
fi
export $shlib_path_name

#---------------------------------------------------------------------------
# Shutdown
# Send SIGTERM to process name $1 with pid in file $2
#
Shutdown() {
    name=$1
    pidfile=$2
    if [ -f $pidfile ]; then
	pid=`cat $pidfile`
	$utilbin_dir/checkprog $pid $name > /dev/null
	if [ "$?" = 0 ]; then
	    kill -TERM $pid
	fi
    fi
}


#---------------------------------------------------------------------------
# GetPathToBinaries
#    echo the name of the bin_dir on this system
#    The check is fullfilled if we can access the qstat binary
#    echo "none" if we can't determine the binary path
GetPathToBinaries() {
    cfgname=$SGE_ROOT/$SGE_CELL/common/bootstrap
    
    base=none
    
    if [ -f $cfgname ]; then
	base=`grep binary_path $cfgname | awk '{ print $2 }'`
	if [ -f $base/qstat ]; then
	    :
	elif [ -f $SGE_ROOT/util/arch ]; then
	    arch=`$SGE_ROOT/util/arch`
	    if [ -f $base/$arch/qstat ]; then
		base=$base/$arch
	    fi
	fi
    fi
    
    echo $base
}


#---------------------------------------------------------------------------
# GetAdminUser
#    echo the name of the admin user on this system
#    echo "root" if admin user retrieval fails
GetAdminUser() {
    cfgname=$SGE_ROOT/$SGE_CELL/common/bootstrap
    user=none
    
    if [ -f $cfgname ]; then
	user=`grep admin_user $cfgname | awk '{ print $2 }'`
    fi
    
    if [ `echo $user|tr "A-Z" "a-z"` = "none" ]; then
	user=root
    fi
    echo $user
}

#---------------------------------------------------------------------------
# GetPathToUtilbin
#    echo the path to the binaires in utilbin
#    The check is fullfilled if we can access the "gethostname" binary
#    echo "none" if we can't determine the binary path
#
GetPathToUtilbin() {
    base=none
    
    if [ -f $SGE_ROOT/util/arch ]; then
	utilbindir=$SGE_ROOT/utilbin
	
	arch=`$SGE_ROOT/util/arch`
	if [ -f $utilbindir/$arch/gethostname ]; then
	    base=$utilbindir/$arch
	fi
    fi
    
    echo $base
}


#---------------------------------------------------------------------------
# GetExecdSpoolDir
# get the execution daemon spooling dir from configuration
GetExecdSpoolDir() {
    EXECD_SPOOL_DIR=`$bin_dir/qconf -sconf $UQHOST | grep execd_spool_dir | awk '{ print $2 }'`
    if [ "$EXECD_SPOOL_DIR" = "" ]; then
	EXECD_SPOOL_DIR=`$bin_dir/qconf -sconf | grep execd_spool_dir | awk '{ print $2 }'`
    fi

}

#---------------------------------------------------------------------------
usage() {
    echo "Grid Engine start/stop script. Valid parameters are:"
    echo ""
    echo "   (no parameters): start qmaster and execution daemon if applicable"
    echo "   \"start\"        dto."
    echo "   \"stop\"         shutdown local Grid Engine processes and jobs"
    echo "   \"softstop\"     shutdown local Grid Engine processes (no jobs)"
    echo "                    host and restart it on this host"
    echo "                    Migration only works if this host is an admin host"
    echo ""
    echo "Only one of the parameters \"start\", \"stop\" or \"softstop\" is allowed."
    echo "Only one of the parameters beginning  with \"-\" is allowed." 
    echo
    echo "Default argument is \"start\" for all components."
    echo "Default for \"stop\" is shutting down all components."
    echo
    exit 1
}

create_meta_block() {
    if [ -d /var/lib/meta-server ] ; then
	rm -f /var/lib/meta-server/sge_execd
	echo "NAME = sge_execd" >> /var/lib/meta-server/sge_execd
	echo "EXE_NAME = sge_execd" >> /var/lib/meta-server/sge_execd
	echo "START_COMMAND = /etc/init.d/sgeexecd start" >> /var/lib/meta-server/sge_execd
	echo "STOP_COMMAND = /etc/init.d/sgeexecd stop" >> /var/lib/meta-server/sge_execd
	echo "CHECK_MEMORY = 1" >> /var/lib/meta-server/sge_execd
	echo "NEED_ANY_PIDS = 1" >> /var/lib/meta-server/sge_execd
    fi
}

delete_meta_block() {
    if [ -d /var/lib/meta-server ] ; then
	rm -f /var/lib/meta-server/sge_execd
    fi
}

#---------------------------------------------------------------------------
# MAIN Procedure
#

if [ "$#" -gt 2 -o "$1" = "-h" -o "$1" = "help" ]; then
    usage
fi

startup=true
execd=true
qstd=false
softstop=false

for i in $* ; do
    if [ "$i" = start ]; then
	startup=true
	create_meta_block
    elif [ "$i" = stop ]; then
	delete_meta_block
	startup=false
    elif [ "$i" = softstop ]; then
	delete_meta_block
	startup=false
	softstop=true
    else
	usage
    fi
done

bin_dir=`GetPathToBinaries`
if [ "$bin_dir" = "none" ]; then
    echo "can't determine path to Grid Engine binaries"
    exit 1
fi

utilbin_dir=`GetPathToUtilbin`
if [ "$utilbin_dir" = "none" ]; then
    echo "can't determine path to Grid Engine utility binaries"
    exit 1
fi

HOST=`$utilbin_dir/gethostname -aname`
UQHOST=`$utilbin_dir/gethostname -aname | cut -f1 -d.`

if [ "$startup" = true ]; then

   # execution daemon is started on this host!

      echo "   starting sge_execd"
      exec 1>/dev/null 2>&1
      $bin_dir/sge_execd
else
   if [ $execd = true ]; then
      # Shutdown execution daemon
      GetExecdSpoolDir
      execd_spool_dir=$EXECD_SPOOL_DIR/$UQHOST

      # Send SIGTERM to execd
      echo "   Shutting down Grid Engine execution daemon"
      Shutdown sge_execd $execd_spool_dir/execd.pid

      if [ $softstop = false ]; then
         # Send SIGTERM to all shepherds
         for jobid in `ls $execd_spool_dir/active_jobs`; do
            echo "   Shutting down Grid Engine shepherd of job $jobid"
            Shutdown sge_shepherd $execd_spool_dir/active_jobs/$jobid/pid
         done
      fi
   fi
fi
