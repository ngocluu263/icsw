# -*- coding: utf-8 -*-
#
# Copyright (C) 2015 Bernhard Mallinger
#
# Send feedback to: <mallinger@init.at>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

from collections import namedtuple
from enum import Enum


# NOTE: This file has been automatically generated by generate_license_list.py
# DO NOT EDIT

__all__ = ['get_available_licenses', 'LicenseEnum', 'LicenseParameterTypeEnum']


def id_string_to_user_name(cls, id_string):
    try:
        return cls[id_string].get_user_name()
    except KeyError:
        return id_string

# NOTE: This file has been automatically generated by generate_license_list.py
# DO NOT EDIT

LicenseEnum = Enum('LicenseEnum', 'kpi ext_license package_install virtual_desktop monitoring_dashboard reporting snapshot notification rms graphing')
LicenseEnum.get_user_name = lambda x: dict(((LicenseEnum.kpi, 'KPI'), (LicenseEnum.ext_license, 'License Optimization Management'), (LicenseEnum.package_install, 'Package Install'), (LicenseEnum.virtual_desktop, 'Virtual Desktop'), (LicenseEnum.monitoring_dashboard, 'Monitoring Dashboard'), (LicenseEnum.reporting, 'Reporting'), (LicenseEnum.snapshot, 'Database snapshot'), (LicenseEnum.notification, 'Notification'), (LicenseEnum.rms, 'Resource Management System (RMS)'), (LicenseEnum.graphing, 'Graphing'))).get(x, None)
LicenseEnum.id_string_to_user_name = classmethod(id_string_to_user_name)

# NOTE: This file has been automatically generated by generate_license_list.py
# DO NOT EDIT

LicenseParameterTypeEnum = Enum('LicenseParameterTypeEnum', 'user service device ext_license')
LicenseParameterTypeEnum.get_user_name = lambda x: dict(((LicenseParameterTypeEnum.user, 'User'), (LicenseParameterTypeEnum.service, 'Service'), (LicenseParameterTypeEnum.device, 'Node'), (LicenseParameterTypeEnum.ext_license, 'External license'))).get(x, None)
LicenseParameterTypeEnum.id_string_to_user_name = classmethod(id_string_to_user_name)

# NOTE: This file has been automatically generated by generate_license_list.py
# DO NOT EDIT


def get_available_licenses():
    AvailableLicense = namedtuple('AvailableLicense', ['id', 'name', 'description'])

    available_licenses = []

    available_licenses.append(AvailableLicense(id=u'kpi', name=u'KPI', description=u'Key Performance Indicators'))
    available_licenses.append(AvailableLicense(id=u'ext_license', name=u'License Optimization Management', description=u'Manage external licenses'))
    available_licenses.append(AvailableLicense(id=u'package_install', name=u'Package Install', description=u''))
    available_licenses.append(AvailableLicense(id=u'virtual_desktop', name=u'Virtual Desktop', description=u''))
    available_licenses.append(AvailableLicense(id=u'monitoring_dashboard', name=u'Monitoring Dashboard', description=u''))
    available_licenses.append(AvailableLicense(id=u'reporting', name=u'Reporting', description=u''))
    available_licenses.append(AvailableLicense(id=u'snapshot', name=u'Database snapshot', description=u''))
    available_licenses.append(AvailableLicense(id=u'notification', name=u'Notification', description=u''))
    available_licenses.append(AvailableLicense(id=u'rms', name=u'Resource Management System (RMS)', description=u''))
    available_licenses.append(AvailableLicense(id=u'graphing', name=u'Graphing', description=u''))

    return available_licenses
