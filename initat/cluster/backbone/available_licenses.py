# -*- coding: utf-8 -*-
#
# Copyright (C) 2015 Bernhard Mallinger
#
# Send feedback to: <mallinger@init.at>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

from collections import namedtuple
from enum import Enum


# NOTE: This file has been automatically generated by generate_license_list.py
# DO NOT EDIT

__all__ = ['get_available_licenses', 'LicenseEnum', 'LicenseParameterTypeEnum']


def id_string_to_user_name(cls, id_string):
    try:
        return cls[id_string].to_user_name()
    except KeyError:
        return id_string

# NOTE: This file has been automatically generated by generate_license_list.py
# DO NOT EDIT

LicenseEnum = Enum('LicenseEnum', 'kpi ext_license package_install virtual_desktop monitoring_dashboard reporting snapshot notification rms graphing netboot md_config_server')
LicenseEnum.to_user_name = lambda x: dict(((LicenseEnum.kpi, 'KPI'), (LicenseEnum.ext_license, 'License Optimization Management'), (LicenseEnum.package_install, 'Package Install'), (LicenseEnum.virtual_desktop, 'Virtual Desktop'), (LicenseEnum.monitoring_dashboard, 'Monitoring Dashboard'), (LicenseEnum.reporting, 'Reporting'), (LicenseEnum.snapshot, 'Database snapshot'), (LicenseEnum.notification, 'Notification'), (LicenseEnum.rms, 'Resource Management System (RMS)'), (LicenseEnum.graphing, 'Graphing'), (LicenseEnum.netboot, 'Netboot'), (LicenseEnum.md_config_server, 'MD-config-server'))).get(x, None)
LicenseEnum.id_string_to_user_name = classmethod(id_string_to_user_name)

# NOTE: This file has been automatically generated by generate_license_list.py
# DO NOT EDIT

LicenseParameterTypeEnum = Enum('LicenseParameterTypeEnum', 'user service device ext_license')
LicenseParameterTypeEnum.to_user_name = lambda x: dict(((LicenseParameterTypeEnum.user, 'User'), (LicenseParameterTypeEnum.service, 'Service'), (LicenseParameterTypeEnum.device, 'Node'), (LicenseParameterTypeEnum.ext_license, 'External license'))).get(x, None)
LicenseParameterTypeEnum.id_string_to_user_name = classmethod(id_string_to_user_name)

# NOTE: This file has been automatically generated by generate_license_list.py
# DO NOT EDIT


def get_available_licenses():
    from initat.cluster.backbone.models.license import InitProduct
    AvailableLicense = namedtuple('AvailableLicense', ['id', 'enum_value', 'name', 'description', 'product'])

    available_licenses = []

    available_licenses.append(AvailableLicense(id=u'kpi', enum_value=LicenseEnum.kpi, name=u'KPI',description=u'Key Performance Indicators', product=None))
    available_licenses.append(AvailableLicense(id=u'ext_license', enum_value=LicenseEnum.ext_license, name=u'License Optimization Management',description=u'Manage external licenses', product=None))
    available_licenses.append(AvailableLicense(id=u'package_install', enum_value=LicenseEnum.package_install, name=u'Package Install',description=u'', product=None))
    available_licenses.append(AvailableLicense(id=u'virtual_desktop', enum_value=LicenseEnum.virtual_desktop, name=u'Virtual Desktop',description=u'', product=InitProduct.NESTOR))
    available_licenses.append(AvailableLicense(id=u'monitoring_dashboard', enum_value=LicenseEnum.monitoring_dashboard, name=u'Monitoring Dashboard',description=u'', product=None))
    available_licenses.append(AvailableLicense(id=u'reporting', enum_value=LicenseEnum.reporting, name=u'Reporting',description=u'', product=InitProduct.NOCTUA))
    available_licenses.append(AvailableLicense(id=u'snapshot', enum_value=LicenseEnum.snapshot, name=u'Database snapshot',description=u'', product=None))
    available_licenses.append(AvailableLicense(id=u'notification', enum_value=LicenseEnum.notification, name=u'Notification',description=u'', product=None))
    available_licenses.append(AvailableLicense(id=u'rms', enum_value=LicenseEnum.rms, name=u'Resource Management System (RMS)',description=u'', product=None))
    available_licenses.append(AvailableLicense(id=u'graphing', enum_value=LicenseEnum.graphing, name=u'Graphing',description=u'', product=None))
    available_licenses.append(AvailableLicense(id=u'netboot', enum_value=LicenseEnum.netboot, name=u'Netboot',description=u'', product=None))
    available_licenses.append(AvailableLicense(id=u'md_config_server', enum_value=LicenseEnum.md_config_server, name=u'MD-config-server',description=u'', product=None))

    return available_licenses
