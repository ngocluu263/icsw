# -*- python -*-
# ex: set syntax=python:
from buildbot.plugins import *
c = BuildmasterConfig = {}

####### BUILDSLAVES ###########################################################

c['protocols'] = {'pb': {'port': 9989}}

from buildbot.plugins import buildslave
c['slaves'] = [
    buildslave.LocalBuildSlave('slave_1'),
]

####### CHANGESOURCES

INSTALL_TEST_DISTRIBUTIONS = ["centos_7", "debian_8", "suse_132"]
#INSTALL_TEST_DISTRIBUTIONS = ["centos_7", "debian_8", "suse_132", "ucs_64", "ucs_32"]
INSTALL_ICSW_VERSION = ["icsw-devel", "icsw-2.5"]
INSTALL_TEST_BUILDER_FORMAT = "install-test-{distribution}-{icsw_version}"
all_install_test_builders = [
    INSTALL_TEST_BUILDER_FORMAT.format(distribution=distro, icsw_version=icsw_version)
    for distro in INSTALL_TEST_DISTRIBUTIONS
    for icsw_version in INSTALL_ICSW_VERSION
]
INSTALL_TEST_SLAVE = "slave_1"

testbuild = ["testbuild"]

####### SCHEDULERS ############################################################

from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers import timed

c['schedulers'] = []

nightly_install_tests = timed.Nightly(
    name='nightly-install-tests',
    branch='master',
    builderNames=all_install_test_builders,
    dayOfWeek=[0,1,2,3,4],
#    month=*
#    hour=range(0, 24, 1)
#    minute=[0, 30]
    hour=7,
    minute=30,
)

force = ForceScheduler(
    name='force',
    builderNames=all_install_test_builders + testbuild,
)

c["schedulers"] = [force, nightly_install_tests]

####### BUILDERS ##############################################################

from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps import shell
from buildbot.steps.source.git import Git
from buildbot.process.results import SUCCESS, SKIPPED, EXCEPTION
c['builders'] = []

def create_install_test_factory(linux_distribution, icsw_version):
    install_test_factory = BuildFactory()

    def create_command_on_vagrant_machine(command):
        return shell.ShellCommand(
            name="(vagrant ssh) {}".format(command),
            command="vagrant ssh -- {}".format(command),
            haltOnFailure=True,
            workdir="build/install_test_vagrant",
        )

    def create_vagrant_command(vagrant_command):
        return shell.ShellCommand(
            command="vagrant {}".format(vagrant_command),
            workdir="build/install_test_vagrant",
            haltOnFailure=True,
            name="(vagrant) {}".format(vagrant_command),
        )

    install_test_factory.addSteps(
        [
            Git(
                repourl='git@repository:/srv/git/icsw.git',
                mode='full',
                haltOnFailure=True,
            ),
            shell.ShellCommand(
                command="testutils/vagrant/create_vagrant_dir.sh {}".format(linux_distribution),
                workdir="build",
                haltOnFailure=True,
                name="create_vagrant_dir.sh",
            ),
            create_vagrant_command("up --debug"),
            # create_command_on_vagrant_machine("sudo ./vagrant_data/install_icsw.py -u initat -p init4license -n ovirt_TEST --assume-yes --do-not-config --cluster-version {}".format(icsw_version)),
            # if "{}".format(icsw_version) == 'icsw_devel':
            #     create_command_on_vagrant_machine("sudo ./vagrant_data/modify_target.sh"),
            # else:
            #     create_command_on_vagrant_machine("sudo ./vagrant_data/modify_target_2.5.sh"),
            # create_command_on_vagrant_machine("sudo ./vagrant_data/postgres_install.sh"),
            # create_command_on_vagrant_machine("sudo ./vagrant_data/icsw_setup.sh"),
            # create_command_on_vagrant_machine("sudo ./vagrant_data/disable_extra_software.sh"),
            # create_command_on_vagrant_machine("sudo ./vagrant_data/update_cluster_id.sh"),
            # create_command_on_vagrant_machine("sudo ./vagrant_data/setup_license.sh"),
            # for selenium tests create_command_on_vagrant_machine("sudo ./vagrant_data/run_tests.sh")
            create_vagrant_command("halt --debug"),
            create_vagrant_command("destroy --debug"),  # destroy sometimes fails if machine is not halted
        ]
    )
    return install_test_factory

for distro in INSTALL_TEST_DISTRIBUTIONS:
    for icsw_version in INSTALL_ICSW_VERSION:
        c["builders"].append(
            BuilderConfig(
                name=INSTALL_TEST_BUILDER_FORMAT.format(distribution=distro, icsw_version=icsw_version),
                factory=create_install_test_factory(linux_distribution=distro, icsw_version=icsw_version),
                slavename=INSTALL_TEST_SLAVE,
            )
        )

def create_testbuild():
    testbuild_factory = BuildFactory()
    testbuild_factory.addStep(steps.ShellCommand(
        command="true",
        workdir="build/install_test_vagrant",
        haltOnFailure=True,
        )
    )
    return testbuild_factory

c['builders'].append(
    BuilderConfig(
        name="testbuild",
        slavenames=["slave_1"],
        factory=create_testbuild(),
    )
)

#############################################################################
####### STATUS TARGETS MAIL NOTIFICATION

from buildbot.plugins import reporters, util
from buildbot.reporters.mail import MailNotifier

c['status'] = []
c['services'] = []

mn = reporters.MailNotifier(
    fromaddr="buildbot02@init.at",
    sendToInterestedUsers=False,
    mode="all",
    relayhost="xeon.init.at",
    extraRecipients=['bahlon@init.at', 'mallinger@init.at'],
    builders=['testbuild', 'all_install_test_builders',]
)

c['services'].append(mn)

####### PROJECT IDENTITY

c['title'] = "icsw_testbot"
c['titleURL'] = "http://www.init.at"
c['buildbotURL'] = "http://10.241.2.209:8020/"

####### minimalistic config to activate new web UI

c['www'] = dict(port=8020,
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
