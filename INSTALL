- installed packages (located at /root/RPMs):

mysql-administrator (not necessary)
syslog-ng
php-mysql
mod_python
tftp
tftp-server

- deleted packages (conflicts with python-modules):

python-ldap
MySQL-python

syslog-ng installieren

/etc/syslog-ng/syslog-ng.conf.init nach /etc/syslog-ng/syslog-ng.conf kopieren
und evtl. modifzieren

- base packages

cluster-backbone           (SQL definitionen)
python-init                (actual Interpreter)
python-modules             (SQL layer)
python-modules-base        (diverse tools)

- Benutzer anlegen

/usr/local/cluster/bin/add_cluster_users.sh (f�r SUSE)
/usr/local/cluster/bin/add_cluster_users.sh -g 81 (f�r RedHat)

- MySQL starten

/etc/init.d/mysqld start

- MySQL connectivity

/usr/local/cluster/etc/mysql.cf editieren

'mysql' aufrufen

> USE mysql;
> INSERT INTO user VALUES('localhost',<DBUSER>,password(<DBPASSWD>),'Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','','','','',0,0,0);
> FLUSH PRIVILEGES;

mysqladmin -h <LOCALHOST|SYSNAME> password '<NEW PASSWD>'

- MySQL user/password:

bacadbu
bacadbpwd

- Datenbank initialisieren

/usr/local/cluster/sql/renew_database.sh

- Node tools

logging-server         (SQL independent)
meta-server            (SQL independent)
host-monitoring        (SQL independent)
child                  (SQL independent)
package-client         (SQL independent)

/usr/local/sbin/(start|check|stop)_node.sh 

Test:

collclient.py get_mvector

Logs in /var/log/icsw/logging-server/<NODE-NAME>

- webserver:

webfrontend (mit --nodeps)

FQDN in /etc/hosts definieren

z.B.:
127.0.0.1               localhost.localdomain localhost
10.12.1.221             bcmarssys1.ca-risc.co.at bcmarssys1


/etc/init.d/httpd start

www-root via system-config-httpd auf /srv/www/htdocs �ndern
/usr/local/cluster/etc/mysql.cf f�r user apache und gruppe idg lesbar machen
/etc/httpd/init_webfrontend.conf nach /etc/httpd/conf.d/ kopieren

via webfrontend einloggen

Grundsetup von einem bestehenden ClusterServer (S1) einspielen

S1: dump_config.sh <DATEI>.bz2 
S1: scp
S2: load_config.sh <DATEI>.bz2 -f -i (mysql_session.sh mu� im aktuellen Suchpfad zu finden sein)
S2: old_config_to_new.py (konvertiert altes Format ins neue)

DeviceGroups und Devices anlegen

Capabilities vergeben (f�r Initialserver: server, base, rebuild_hopcount, mother_server, rrd_server)

*** Wichtig: Wann immer Servercapabilities ge�ndert werden mu� man sich neu am Frontend anmelden

- Server tools

cluster-server installieren und starten und routing mittels

cluster-server.py -c rebuild_hopcount

initialisieren.

mother installieren und starten (wegen tftp: --nodeps)

rrd-server installieren
Packages:
rrd-server
python-modules-rrd

GridEngine kompilieren

RHES4: wenn JAVA_HOME/JAVA_INCL nicht gesetzt sind f�hrt das dazu da� im Include-Pfad /usr/include/linux vorkommt was
wiederum dazu f�hrt da� die SGE nicht kompiliert werden kann

ben�tigt werden (f�r RH4):

fontconfig-devel-2.2.3-7.i386.rpm
xorg-x11-deprecated-libs-devel-6.8.1-23.EL.i386.rpm
xorg-x11-devel-6.8.1-23.EL.i386.rpm
openmotif-devel-2.2.3-6.RHEL4.2.i386.rpm
openmotif-2.2.3-6.RHEL4.2.i386.rpm

kompilieren mit:

scripts/zerodepend
./aimk -only-depend
./aimk -spool-classic -no-qtcsh
./aimk -man

rms-tools installieren

cp -a /usr/local/cluster/bin/batchsys.sh_client /etc/profile.d/batchsys.sh

SGE_ROOT und SGE_CELL definieren

echo $SGE_ROOT > /etc/sge_root
echo $SGE_CELL > /etc/sge_cell
echo SGE > /etc/batch_system

mkdir -p $SGE_ROOT
scripts/distinst -local -noexit -all lx26-x86 -- man

cd $SGE_ROOT
chown -R sge.sge .
cd bin
ln -s lx26-x86/ lx24-x86
cd lib
ln -s lx26-x86/ lx24-x86
cd utilbin
ln -s lx26-x86/ lx24-x86

echo "sge_qmaster     15008/tcp" >> /etc/services
echo "sge_execd       15009/tcp" >> /etc/services
echo "sge_commd       15010/tcp" >> /etc/services

touch bin/lx26-x86/qtcsh

./inst_sge -m

eventuell nicht vorhandene binaries in ./util/install_modules/inst_common.sh l�schen.

rms-tools mit --force nachinstallieren

/usr/local/sge_init/modify_sge_config.sh

echo $SGE_ROOT/lib/lx26-x86/ >> /etc/ld.so.conf
ldconfig

# mother

Verzeichnis /tftpboot/kernels anlegen
Kernel(s) in das Verzeichnis kopieren (Beispiel 2.6.9-5.ELsmp):

[root@bcmarssys1 2.6.9-5.ELsmp]# ls -la
drwxr-xr-x  3 root root    4096 Jun  8 14:21 .
drwxr-xr-x  3 root root    4096 Jun  8 14:19 ..
-rw-r--r--  1 root root 1400620 Jan  6 01:35 bzImage
drwxr-xr-x  3 root root    4096 Jun  8 14:19 lib (/modules/2.6.9-5.ELsmp/..)
-rw-r--r--  1 root root  741143 Jan  6 01:35 System.map

initrds generieren:

populate_ramdisk.py -i -m tg3 /tftpboot/kernels/2.6.9-5.ELsmp/

(ignoriert fehlende Dateien und f�gt den tg3-Treiber zu stage1 hinzu)

Cluster-Server mit Netzwerken in Production und boot-net eintragen

cluster-server -c write_dhcpd_config

Golden Client:

cluster-server.py -c write_rsyncd_config {exclude_dirs:/dir1:/dir2:/dir3}

------------------ example config -----------------------
id = 0
gid = 0
read only = true
use chroot = true
transfer logging = false
log format = %h %o %f %l %b
log file = /var/log/rsyncd.log
slp refresh = 300

[root]
    path = /
    exclude = /proc/ /sys/ /opt/oracle /oracletest

[server_golden_client]
    path = /oracletest/server_golden_client
---------------------------------------------------------

rsync -zlpogDtr --stats -v rsync://root@localhost/root {local_dir}

the above is valid for a local clone

cluster-config-server installieren

